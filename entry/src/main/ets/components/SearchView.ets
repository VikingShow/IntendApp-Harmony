// File: entry/src/main/ets/components/SearchView.ets

import { SearchService, SearchResult, SearchOptions } from '../services/SearchService';
import { CommonButton } from './CommonButton';
import { ThemeConfig } from '../utils/ThemeConfig';
import { ProjectMeta } from '../services/StorageService';
import { TaskNode } from '../model/ProjectData';
import { LoadingView } from './LoadingView';

@Component
export struct SearchView {
  @State searchKeyword: string = '';
  @State searchResults: SearchResult[] = [];
  @State isSearching: boolean = false;
  @State showFilters: boolean = false;
  @State includeCompleted: boolean = true;
  @State includeIncomplete: boolean = true;
  @State popularKeywords: string[] = [];
  @State searchSuggestions: string[] = [];

  onProjectSelect: (projectId: string) => void = () => {};
  onClose: () => void = () => {};

  private searchService: SearchService = SearchService.getInstance();

  async aboutToAppear() {
    await this.loadPopularKeywords();
  }

  async loadPopularKeywords() {
    try {
      this.popularKeywords = await this.searchService.getPopularKeywords();
    } catch (error) {
      console.error('Âä†ËΩΩÁÉ≠Èó®ÂÖ≥ÈîÆËØçÂ§±Ë¥•:', error);
    }
  }

  async performSearch() {
    if (!this.searchKeyword.trim()) {
      this.searchResults = [];
      return;
    }

    this.isSearching = true;
    try {
      const options: SearchOptions = {
        keyword: this.searchKeyword,
        includeCompleted: this.includeCompleted,
        includeIncomplete: this.includeIncomplete
      };

      this.searchResults = await this.searchService.searchProjects(options);
    } catch (error) {
      console.error('ÊêúÁ¥¢Â§±Ë¥•:', error);
    } finally {
      this.isSearching = false;
    }
  }

  async getSuggestions(keyword: string) {
    if (keyword.length < 1) {
      this.searchSuggestions = [];
      return;
    }

    try {
      this.searchSuggestions = await this.searchService.getSearchSuggestions(keyword);
    } catch (error) {
      console.error('Ëé∑ÂèñÊêúÁ¥¢Âª∫ËÆÆÂ§±Ë¥•:', error);
    }
  }

  build() {
    Column() {
      // ÊêúÁ¥¢Â§¥ÈÉ®
      this.SearchHeader()

      // ÊêúÁ¥¢ËøáÊª§Âô®
      if (this.showFilters) {
        this.SearchFilters()
      }

      // ÊêúÁ¥¢Âª∫ËÆÆ
      if (this.searchSuggestions.length > 0 && this.searchKeyword) {
        this.SearchSuggestions()
      }

      // ÁÉ≠Èó®ÂÖ≥ÈîÆËØç
      if (this.popularKeywords.length > 0 && !this.searchKeyword) {
        this.PopularKeywords()
      }

      // ÊêúÁ¥¢ÁªìÊûú
      if (this.searchResults.length > 0) {
        this.SearchResults()
      } else if (this.searchKeyword && !this.isSearching) {
        this.EmptyResults()
      }

      // Âä†ËΩΩÁä∂ÊÄÅ
      if (this.isSearching) {
        this.LoadingState()
      }
    }
    .width('100%')
    .height('100%')
    .backgroundColor(ThemeConfig.white)
  }

  @Builder
  SearchHeader() {
    Row({ space: ThemeConfig.spacingM }) {
      // ËøîÂõûÊåâÈíÆ
      Button({ type: ButtonType.Circle }) {
        Image($r('app.media.ic_back'))
          .width(20)
          .height(20)
          .fillColor(ThemeConfig.gray600)
      }
      .width(40)
      .height(40)
      .backgroundColor(ThemeConfig.gray100)
      .onClick(() => {
        this.onClose();
      })

      // ÊêúÁ¥¢ËæìÂÖ•Ê°Ü
      TextInput({ 
        placeholder: 'ÊêúÁ¥¢È°πÁõÆ„ÄÅ‰ªªÂä°ÊàñÊ£ÄÊü•Ê∏ÖÂçï...',
        text: this.searchKeyword 
      })
        .backgroundColor(ThemeConfig.gray50)
        .borderRadius(ThemeConfig.radiusMedium)
        .padding(ThemeConfig.spacingM)
        .layoutWeight(1)
        .onChange((value: string) => {
          this.searchKeyword = value;
          this.getSuggestions(value);
        })
        .onSubmit(() => {
          this.performSearch();
        })

      // ËøáÊª§Âô®ÊåâÈíÆ
      Button({ type: ButtonType.Circle }) {
        Image($r('app.media.ic_select'))
          .width(20)
          .height(20)
          .fillColor(this.showFilters ? ThemeConfig.primaryColor : ThemeConfig.gray600)
      }
      .width(40)
      .height(40)
      .backgroundColor(this.showFilters ? ThemeConfig.primaryLight : ThemeConfig.gray100)
      .onClick(() => {
        this.showFilters = !this.showFilters;
      })

      // ÊêúÁ¥¢ÊåâÈíÆ
      Button({ type: ButtonType.Circle }) {
        Image($r('app.media.ic_calculate'))
          .width(20)
          .height(20)
          .fillColor(Color.White)
      }
      .width(40)
      .height(40)
      .backgroundColor(ThemeConfig.primaryColor)
      .onClick(() => {
        this.performSearch();
      })
    }
    .width('100%')
    .padding(ThemeConfig.spacingL)
    .alignItems(VerticalAlign.Center)
  }

  @Builder
  SearchFilters() {
    Column({ space: ThemeConfig.spacingM }) {
      Text('ÊêúÁ¥¢ËøáÊª§Âô®')
        .fontSize(ThemeConfig.fontSizeM)
        .fontWeight(FontWeight.Medium)
        .fontColor(ThemeConfig.gray800)

      Row({ space: ThemeConfig.spacingM }) {
        Toggle({ type: ToggleType.Checkbox, isOn: this.includeCompleted })
          .onChange((isOn: boolean) => {
            this.includeCompleted = isOn;
          })
        Text('ÂåÖÂê´Â∑≤ÂÆåÊàê')
          .fontSize(ThemeConfig.fontSizeS)
          .fontColor(ThemeConfig.gray700)
      }
      .alignItems(VerticalAlign.Center)

      Row({ space: ThemeConfig.spacingM }) {
        Toggle({ type: ToggleType.Checkbox, isOn: this.includeIncomplete })
          .onChange((isOn: boolean) => {
            this.includeIncomplete = isOn;
          })
        Text('ÂåÖÂê´Êú™ÂÆåÊàê')
          .fontSize(ThemeConfig.fontSizeS)
          .fontColor(ThemeConfig.gray700)
      }
      .alignItems(VerticalAlign.Center)
    }
    .width('100%')
    .padding(ThemeConfig.spacingL)
    .backgroundColor(ThemeConfig.gray50)
    .borderRadius(ThemeConfig.radiusMedium)
    .margin({ left: ThemeConfig.spacingL, right: ThemeConfig.spacingL })
  }

  @Builder
  SearchSuggestions() {
    Column({ space: ThemeConfig.spacingS }) {
      Text('ÊêúÁ¥¢Âª∫ËÆÆ')
        .fontSize(ThemeConfig.fontSizeS)
        .fontColor(ThemeConfig.gray600)
        .margin({ left: ThemeConfig.spacingL })

      ForEach(this.searchSuggestions, (suggestion: string) => {
        Row() {
          Text(suggestion)
            .fontSize(ThemeConfig.fontSizeM)
            .fontColor(ThemeConfig.gray800)
            .layoutWeight(1)
        }
        .width('100%')
        .padding(ThemeConfig.spacingM)
        .backgroundColor(ThemeConfig.white)
        .onClick(() => {
          this.searchKeyword = suggestion;
          this.searchSuggestions = [];
          this.performSearch();
        })
      })
    }
    .margin({ top: ThemeConfig.spacingS })
  }

  @Builder
  PopularKeywords() {
    Column({ space: ThemeConfig.spacingM }) {
      Text('ÁÉ≠Èó®ÊêúÁ¥¢')
        .fontSize(ThemeConfig.fontSizeM)
        .fontWeight(FontWeight.Medium)
        .fontColor(ThemeConfig.gray800)
        .margin({ left: ThemeConfig.spacingL })

      Flex({ wrap: FlexWrap.Wrap, justifyContent: FlexAlign.Start }) {
        ForEach(this.popularKeywords, (keyword: string) => {
          Button() {
            Text(keyword)
              .fontSize(ThemeConfig.fontSizeS)
              .fontColor(ThemeConfig.primaryColor)
          }
          .height(28)
          .backgroundColor(ThemeConfig.primaryLight)
          .borderRadius(ThemeConfig.radiusSmall)
          .margin({ right: ThemeConfig.spacingS, bottom: ThemeConfig.spacingS })
          .onClick(() => {
            this.searchKeyword = keyword;
            this.performSearch();
          })
        })
      }
      .padding(ThemeConfig.spacingL)
    }
  }

  @Builder
  SearchResults() {
    List({ space: ThemeConfig.spacingM }) {
      ForEach(this.searchResults, (result: SearchResult) => {
        ListItem() {
          this.SearchResultCard(result)
        }
      })
    }
    .padding(ThemeConfig.spacingL)
  }

  @Builder
  SearchResultCard(result: SearchResult) {
    Column({ space: ThemeConfig.spacingS }) {
      // È°πÁõÆ‰ø°ÊÅØ
      Row({ space: ThemeConfig.spacingM }) {
        Text('üìÅ')
          .fontSize(ThemeConfig.fontSizeL)
          .fontColor(ThemeConfig.primaryColor)
        
        Column({ space: ThemeConfig.spacingXS }) {
          Text(result.project.name)
            .fontSize(ThemeConfig.fontSizeM)
            .fontWeight(FontWeight.Medium)
            .fontColor(ThemeConfig.gray800)
          
          Text(`Áõ∏ÂÖ≥ÊÄß: ${result.relevanceScore}`)
            .fontSize(ThemeConfig.fontSizeXS)
            .fontColor(ThemeConfig.gray500)
        }
        .layoutWeight(1)
        .alignItems(HorizontalAlign.Start)

        Button() {
          Text('Êü•Áúã')
            .fontSize(ThemeConfig.fontSizeS)
            .fontColor(Color.White)
        }
        .height(28)
        .backgroundColor(ThemeConfig.primaryColor)
        .borderRadius(ThemeConfig.radiusSmall)
        .onClick(() => {
          this.onProjectSelect(result.project.id);
        })
      }

      // ÂåπÈÖçÁöÑ‰ªªÂä°
      if (result.matchedTasks.length > 0) {
        Column({ space: ThemeConfig.spacingXS }) {
          Text(`ÂåπÈÖçÁöÑ‰ªªÂä° (${result.matchedTasks.length})`)
            .fontSize(ThemeConfig.fontSizeS)
            .fontColor(ThemeConfig.gray600)
            .margin({ top: ThemeConfig.spacingS })

          ForEach(result.matchedTasks, (task: TaskNode) => {
            Row({ space: ThemeConfig.spacingS }) {
              Text('‚Ä¢')
                .fontSize(ThemeConfig.fontSizeS)
                .fontColor(ThemeConfig.gray500)
              
              Text(task.name)
                .fontSize(ThemeConfig.fontSizeS)
                .fontColor(ThemeConfig.gray700)
                .layoutWeight(1)
                .maxLines(1)
                .textOverflow({ overflow: TextOverflow.Ellipsis })
              
              Text(task.checklist.every(item => item.isCompleted) ? '‚úÖ' : '‚è≥')
                .fontSize(ThemeConfig.fontSizeS)
                .fontColor(ThemeConfig.gray500)
            }
            .width('100%')
            .padding({ left: ThemeConfig.spacingM })
          })
        }
      }
    }
    .width('100%')
    .padding(ThemeConfig.spacingM)
    .backgroundColor(ThemeConfig.white)
    .borderRadius(ThemeConfig.radiusMedium)
    .border({ width: 1, color: ThemeConfig.gray200, radius: ThemeConfig.radiusMedium })
  }

  @Builder
  EmptyResults() {
    Column({ space: ThemeConfig.spacingM }) {
      Image($r('app.media.ic_empty_box'))
        .width(80)
        .height(80)
        .opacity(0.6)
      
      Text('Êú™ÊâæÂà∞Áõ∏ÂÖ≥ÁªìÊûú')
        .fontSize(ThemeConfig.fontSizeL)
        .fontColor(ThemeConfig.gray600)
        .fontWeight(FontWeight.Medium)
      
      Text('Â∞ùËØï‰ΩøÁî®‰∏çÂêåÁöÑÂÖ≥ÈîÆËØçÊàñË∞ÉÊï¥ÊêúÁ¥¢Êù°‰ª∂')
        .fontSize(ThemeConfig.fontSizeS)
        .fontColor(ThemeConfig.gray500)
        .textAlign(TextAlign.Center)
    }
    .width('100%')
    .layoutWeight(1)
    .justifyContent(FlexAlign.Center)
    .alignItems(HorizontalAlign.Center)
  }

  @Builder
  LoadingState() {
    Column({ space: ThemeConfig.spacingM }) {
      LoadingView({ message: 'ÊêúÁ¥¢‰∏≠...' })
    }
    .width('100%')
    .layoutWeight(1)
    .justifyContent(FlexAlign.Center)
    .alignItems(HorizontalAlign.Center)
  }
} 