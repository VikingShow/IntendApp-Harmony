// File: entry/src/main/ets/components/Sidebar.ets

import { Project, TaskNode, ChecklistItem } from '../model/ProjectData';
import { TaskEditor } from './TaskEditor';
import promptAction from '@ohos.promptAction';

@Component
export struct Sidebar {
  // projectÁé∞Âú®ÂèØËÉΩ‰∏∫nullÔºåÁõ¥Âà∞ÂÆÉË¢´Âä†ËΩΩ
  @ObjectLink project: Project | null;
  @Link selectedTask: TaskNode | null;

  @State isEditingProjectName: boolean = false;
  @State tempProjectName: string = '';

  onUpdateTask: (task: TaskNode) => void = () => {};
  onUpdateChecklist: (taskId: string, checklist: ChecklistItem[]) => void = () => {};
  onAddChecklistItem: (taskId: string, text: string) => void = () => {};
  onUpdateProjectName: (newName: string) => void = () => {};
  onAddTask: () => void = () => {};
  onDeleteTask: (id: string) => void = () => {};
  onStartConnecting: () => void = () => {};
  onCalculate: () => void = () => {};
  // Êñ∞Â¢ûÂõûË∞É
  onSave: () => void = () => {};
  onBack: () => void = () => {};

  private saveProjectName() {
    if (this.tempProjectName.trim() === '') {
      promptAction.showToast({ message: 'È°πÁõÆÂêçÁß∞‰∏çËÉΩ‰∏∫Á©∫' });
      return;
    }
    this.onUpdateProjectName(this.tempProjectName);
    this.isEditingProjectName = false;
  }

  build() {
    Column() {
      // Âè™ÊúâÂΩìÈ°πÁõÆÂä†ËΩΩÂÆåÊàêÂêéÊâçÊòæÁ§∫ÂÜÖÂÆπ
      if (this.project) {
        if (this.selectedTask === null) {
          this.ProjectView()
        } else {
          TaskEditor({
            task: this.selectedTask,
            onUpdateTask: this.onUpdateTask,
            onUpdateChecklist: this.onUpdateChecklist,
            onAddChecklistItem: this.onAddChecklistItem,
            onDeleteTask: this.onDeleteTask,
            onStartConnecting: this.onStartConnecting,
            onBack: () => {
              this.selectedTask = null;
            }
          })
        }
      } else {
        // È°πÁõÆÂä†ËΩΩ‰∏≠ÊàñÂä†ËΩΩÂ§±Ë¥•Êó∂ÊòæÁ§∫ÁöÑÂÜÖÂÆπ
        Column() {
          LoadingProgress()
            .width(40)
            .height(40)
            .color('#007DFF')
          Text('Ê≠£Âú®Âä†ËΩΩÈ°πÁõÆ...')
            .fontSize(16)
            .fontColor('#666666')
            .margin({ top: 12 })
        }
        .width('100%')
        .height('100%')
        .justifyContent(FlexAlign.Center)
      }
    }
    .width('100%')
    .height('100%')
    .backgroundColor('#F8FAFC')
    .padding(20)
  }

  @Builder
  ProjectView() {
    if (this.project) {
      Column({ space: 16 }) {
        // --- È°∂ÈÉ®Êìç‰ΩúÊ†è ---
        Row({space: 12}) {
          // ËøîÂõû‰∏ªÈ°µÊåâÈíÆ
          Button() { 
            Image($r('app.media.ic_back'))
              .width(18)
              .height(18)
              .fillColor('#666666')
          }
          .width(44)
          .height(44)
          .type(ButtonType.Circle)
          .backgroundColor('#FFFFFF')
          .shadow({ radius: 4, color: '#00000010', offsetX: 0, offsetY: 2 })
          .onClick(() => { this.onBack() })

          // ‰øùÂ≠òÈ°πÁõÆÊåâÈíÆ
          Button({ type: ButtonType.Capsule }) {
            Row({ space: 8 }) {
              Image($r('app.media.ic_save'))
                .width(18)
                .height(18)
                .fillColor(Color.White)
              Text('‰øùÂ≠òÈ°πÁõÆ')
                .fontSize(15)
                .fontColor(Color.White)
                .fontWeight(FontWeight.Medium)
            }
          }
          .layoutWeight(1)
          .height(44)
          .backgroundColor('#007DFF')
          .shadow({ radius: 6, color: '#007DFF30', offsetX: 0, offsetY: 3 })
          .onClick(() => { this.onSave() })
        }
        .width('100%')

        // È°πÁõÆÊ†áÈ¢òÂå∫Âüü
        Column({ space: 8 }) {
          Row({ space: 12 }) {
            if (this.isEditingProjectName) {
              TextInput({ text: this.tempProjectName })
                .layoutWeight(1)
                .fontSize(22)
                .fontWeight(FontWeight.Bold)
                .backgroundColor('#FFFFFF')
                .borderRadius(8)
                .padding(12)
                .onChange((value: string) => { this.tempProjectName = value; })
                .onSubmit(() => { this.saveProjectName(); })
            } else {
              Text(this.project.name)
                .fontSize(22)
                .fontWeight(FontWeight.Bold)
                .layoutWeight(1)
                .textOverflow({ overflow: TextOverflow.Ellipsis })
                .maxLines(1)
                .fontColor('#1F2937')
            }
            Button() { 
              Image(this.isEditingProjectName ? $r('app.media.ic_confirm') : $r('app.media.ic_edit'))
                .width(18)
                .height(18)
                .fillColor(this.isEditingProjectName ? '#28A745' : '#666666')
            }
            .width(40)
            .height(40)
            .type(ButtonType.Circle)
            .backgroundColor('#FFFFFF')
            .shadow({ radius: 4, color: '#00000010', offsetX: 0, offsetY: 2 })
            .onClick(() => {
              if (this.isEditingProjectName) {
                this.saveProjectName();
              } else {
                this.tempProjectName = this.project!.name;
                this.isEditingProjectName = true;
              }
            })
          }
          .width('100%')
          .alignItems(VerticalAlign.Center)

          // È°πÁõÆÁªüËÆ°Âç°Áâá
          Row({ space: 16 }) {
            Column() {
              Text(this.project.tasks.length.toString())
                .fontSize(20)
                .fontWeight(FontWeight.Bold)
                .fontColor('#007DFF')
              Text('ÊÄª‰ªªÂä°')
                .fontSize(12)
                .fontColor('#6B7280')
            }
            .layoutWeight(1)
            .padding(12)
            .backgroundColor('#FFFFFF')
            .borderRadius(8)
            .shadow({ radius: 4, color: '#00000008', offsetX: 0, offsetY: 1 })

            Column() {
              Text(this.project.tasks.filter(t => t.isCritical).length.toString())
                .fontSize(20)
                .fontWeight(FontWeight.Bold)
                .fontColor('#D0021B')
              Text('ÂÖ≥ÈîÆ‰ªªÂä°')
                .fontSize(12)
                .fontColor('#6B7280')
            }
            .layoutWeight(1)
            .padding(12)
            .backgroundColor('#FFFFFF')
            .borderRadius(8)
            .shadow({ radius: 4, color: '#00000008', offsetX: 0, offsetY: 1 })
          }
          .width('100%')
        }
        .padding(16)
        .backgroundColor('#FFFFFF')
        .borderRadius(12)
        .shadow({ radius: 8, color: '#0000000A', offsetX: 0, offsetY: 2 })

        // Êìç‰ΩúÊåâÈíÆÂå∫Âüü
        Column({ space: 12 }) {
          Button() {
            Row({ space: 8 }) {
              Text('Ôºã')
                .fontSize(18)
                .fontColor(Color.White)
              Text('Ê∑ªÂä†Êñ∞‰ªªÂä°')
                .fontSize(15)
                .fontColor(Color.White)
                .fontWeight(FontWeight.Medium)
            }
          }
          .width('100%')
          .height(48)
          .backgroundColor('#007DFF')
          .borderRadius(8)
          .shadow({ radius: 6, color: '#007DFF30', offsetX: 0, offsetY: 3 })
          .onClick(() => { this.onAddTask() })

          Button() {
            Row({ space: 8 }) {
              Text('üí°')
                .fontSize(16)
                .fontColor(Color.White)
              Text('ËÆ°ÁÆóÂÖ≥ÈîÆË∑ØÂæÑ')
                .fontSize(15)
                .fontColor(Color.White)
                .fontWeight(FontWeight.Medium)
            }
          }
          .width('100%')
          .height(48)
          .backgroundColor('#28A745')
          .borderRadius(8)
          .shadow({ radius: 6, color: '#28A74530', offsetX: 0, offsetY: 3 })
          .onClick(() => { this.onCalculate() })
        }

        // ‰ªªÂä°ÂàóË°®Âå∫Âüü
        Column({ space: 8 }) {
          Text('‰ªªÂä°ÂàóË°®')
            .fontSize(16)
            .fontWeight(FontWeight.Bold)
            .fontColor('#1F2937')
            .width('100%')
            .textAlign(TextAlign.Start)

          if (this.project.tasks.length === 0) {
            Column({ space: 12 }) {
              Image($r('app.media.ic_empty_box'))
                .width(60)
                .height(60)
                .opacity(0.5)
              Text('ÊöÇÊó†‰ªªÂä°')
                .fontSize(14)
                .fontColor('#9CA3AF')
              Text('ÁÇπÂáª‰∏äÊñπÊåâÈíÆÊ∑ªÂä†Êñ∞‰ªªÂä°')
                .fontSize(12)
                .fontColor('#9CA3AF')
            }
            .width('100%')
            .padding(32)
            .justifyContent(FlexAlign.Center)
            .layoutWeight(1)
          } else {
            List({ space: 8 }) {
              ForEach(this.project.tasks.sort((a, b) => a.startDate.getTime() - b.startDate.getTime()), (task: TaskNode) => {
                ListItem() {
                  Row({ space: 12 }) {
                    // ‰ªªÂä°Áä∂ÊÄÅÊåáÁ§∫Âô®
                    Column()
                      .width(4)
                      .height(40)
                      .backgroundColor(task.isCritical ? '#D0021B' : '#007DFF')
                      .borderRadius(2)

                    // ‰ªªÂä°‰ø°ÊÅØ
                    Column({ space: 4 }) {
                      Text(task.name)
                        .fontSize(15)
                        .fontWeight(FontWeight.Medium)
                        .fontColor('#1F2937')
                        .maxLines(1)
                        .textOverflow({ overflow: TextOverflow.Ellipsis })
                      Text(`${task.startDate.toLocaleDateString()} - ${task.endDate.toLocaleDateString()}`)
                        .fontSize(12)
                        .fontColor('#6B7280')
                    }
                    .alignItems(HorizontalAlign.Start)
                    .layoutWeight(1)

                    // ÂÖ≥ÈîÆ‰ªªÂä°Ê†áËØÜ
                    if (task.isCritical) {
                      Text('üî•')
                        .fontSize(14)
                        .fontColor('#D0021B')
                    }
                  }
                  .width('100%')
                  .padding(16)
                  .backgroundColor(this.selectedTask?.id === task.id ? '#EFF6FF' : '#FFFFFF')
                  .borderRadius(10)
                  .shadow({ radius: 4, color: this.selectedTask?.id === task.id ? '#007DFF20' : '#00000008', offsetX: 0, offsetY: 1 })
                  .border({ width: this.selectedTask?.id === task.id ? 2 : 0, color: '#007DFF', radius: 10 })
                  .onClick(() => { 
                    this.selectedTask = task; 
                  })
                }
              })
            }
            .layoutWeight(1)
          }
        }
        .layoutWeight(1)
      }
      .alignItems(HorizontalAlign.Start)
    }
  }
}
