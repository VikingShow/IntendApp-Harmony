// File: entry/src/main/ets/pages/Home.ets
import router from '@ohos.router';
import { StorageService, ProjectMeta } from '../services/StorageService';
import { LoadingService } from '../services/LoadingService';
import { Project, TaskNode, ChecklistItem } from '../model/ProjectData';
import { DashboardView } from '../components/DashboardView';
import { WelcomeView } from '../components/WelcomeView';
import { LoadingView } from '../components/LoadingView';
import promptAction from '@ohos.promptAction';

@Entry
@Component
struct HomePage {
  @State projectList: ProjectMeta[] = [];
  @State selectedProjectDetail: Project | null = null;
  @State selectedProjectId: string | null = null;
  @State componentKey: number = 0;
  @State isLoading: boolean = false;

  private storageService: StorageService | null = null;
  private loadingService: LoadingService = LoadingService.getInstance();

  async aboutToAppear() {
    const context = getContext(this).getApplicationContext();
    this.storageService = StorageService.getInstance(context.filesDir);
    
    // Ê≥®ÂÜåÂä†ËΩΩÁä∂ÊÄÅÁõëÂê¨Âô®
    this.loadingService.addListener((key: string, loading: boolean) => {
      if (key === 'project_loading') {
        this.isLoading = loading;
      }
    });
    
    await this.loadProjects();
  }

  onPageShow() {
    this.loadProjects();
  }

  async loadProjects() {
    if (this.storageService) {
      try {
        this.loadingService.setLoading('project_loading', true);
        const list = await this.storageService.getProjectList();
        this.projectList = list.sort((a, b) => b.lastModified - a.lastModified);
        if (this.selectedProjectId) {
          await this.onSelectProject(this.selectedProjectId);
        }
      } catch (error) {
        promptAction.showToast({ message: 'Âä†ËΩΩÈ°πÁõÆÂàóË°®Â§±Ë¥•' });
        console.error('[Home] Load projects error:', error);
      } finally {
        this.loadingService.setLoading('project_loading', false);
      }
    }
  }

  async onSelectProject(projectId: string) {
    if (this.storageService) {
      console.log(`[Home] Selecting project: ${projectId}`);
      this.selectedProjectId = projectId;
      
      // ÊòæÁ§∫Âä†ËΩΩÁä∂ÊÄÅ
      this.loadingService.setLoading('project_loading', true);
      
      // ÂÖàÊ∏ÖÁ©∫ÂΩìÂâçÊï∞ÊçÆÔºåËß¶ÂèëUIÊõ¥Êñ∞
      this.selectedProjectDetail = null;
      this.componentKey++;
      
      try {
        // Âä†ËΩΩÊñ∞È°πÁõÆÊï∞ÊçÆ
        const loadedProject = await this.storageService.getProject(projectId);
        console.log(`[Home] Project loaded: ${loadedProject?.name} with ${loadedProject?.tasks.length} tasks`);
        
        // ËÆæÁΩÆÊñ∞Êï∞ÊçÆ
        this.selectedProjectDetail = loadedProject;
        this.componentKey++;
        console.log(`[Home] Project data updated, component key: ${this.componentKey}`);
        
        promptAction.showToast({ message: `Â∑≤ÂàáÊç¢Âà∞È°πÁõÆ: ${loadedProject?.name}` });
      } catch (error) {
        promptAction.showToast({ message: 'Âä†ËΩΩÈ°πÁõÆÂ§±Ë¥•' });
        this.handleError(error as Error, "onSelectProject");
      } finally {
        // ÈöêËóèÂä†ËΩΩÁä∂ÊÄÅ
        this.loadingService.setLoading('project_loading', false);
      }
    }
  }

  // FIX: New method to handle project creation, saving, and navigation.
  async createAndOpenNewProject() {
    if (!this.storageService) {
      this.handleError(new Error("Â≠òÂÇ®ÊúçÂä°Êú™ÂàùÂßãÂåñ"), "createAndOpenNewProject");
      return;
    }

    try {
      console.log("[EasyFlow] Creating new project from Home page");

      // 1. Create a new project with example data.
      const newProject = new Project(undefined, 'Êñ∞ÁßªÂä®Â∫îÁî®ÂºÄÂèëËÆ°Âàí');
      const today = new Date();
      const task1: TaskNode = {
        id: 'task_1', name: 'ÈúÄÊ±ÇÂàÜÊûê‰∏éÂéüÂûãËÆæËÆ°',
        startDate: today,
        endDate: new Date(today.getTime() + 4 * 24 * 60 * 60 * 1000),
        checklist: [
          { id: 'c1_1', text: 'Êî∂ÈõÜÁî®Êà∑ÂèçÈ¶à', isCompleted: true },
          { id: 'c1_2', text: 'ÁªòÂà∂Á∫øÊ°ÜÂõæ', isCompleted: true },
          { id: 'c1_3', text: 'Âà∂‰Ωú‰∫§‰∫íÂéüÂûã', isCompleted: false },
        ],
        x: 50, y: 150
      };
      const task2: TaskNode = {
        id: 'task_2', name: 'UI/UXËßÜËßâËÆæËÆ°',
        startDate: new Date(today.getTime() + 5 * 24 * 60 * 60 * 1000),
        endDate: new Date(today.getTime() + 9 * 24 * 60 * 60 * 1000),
        checklist: [],
        x: 350, y: 50
      };
      newProject.tasks = [task1, task2];
      newProject.dependencies = [{ fromId: 'task_1', toId: 'task_2' }];

      // 2. Save the new project to storage immediately.
      await this.storageService.saveProject(newProject);
      console.log(`[EasyFlow] Project saved with ID: ${newProject.id}`);
      promptAction.showToast({ message: `È°πÁõÆ "${newProject.name}" Â∑≤ÂàõÂª∫` });

      // 3. Navigate to the editor page with the new project's ID.
      router.pushUrl({
        url: 'pages/Index',
        params: { projectId: newProject.id }
      });
    } catch (error) {
      this.handleError(error as Error, "createAndOpenNewProject");
    }
  }

  // Áªü‰∏ÄÁöÑÈîôËØØÂ§ÑÁêÜ
  private handleError(error: Error, context: string) {
    console.error(`[${context}] Error:`, error);
    promptAction.showToast({ message: `Êìç‰ΩúÂ§±Ë¥•: ${error.message}` });
  }

  async deleteProject(projectId: string) {
    // Ê∑ªÂä†Âà†Èô§Á°ÆËÆ§ÂØπËØùÊ°Ü
    AlertDialog.show({
      title: 'Á°ÆËÆ§Âà†Èô§',
      message: 'Á°ÆÂÆöË¶ÅÂà†Èô§Ëøô‰∏™È°πÁõÆÂêóÔºüÂà†Èô§ÂêéÊó†Ê≥ïÊÅ¢Â§ç„ÄÇ',
      primaryButton: {
        value: 'ÂèñÊ∂à',
        action: () => {
          // ÂèñÊ∂àÂà†Èô§
        }
      },
      secondaryButton: {
        value: 'Âà†Èô§',
        fontColor: '#EF4444',
        action: async () => {
          if (this.storageService) {
            try {
              await this.storageService.deleteProject(projectId);
              promptAction.showToast({ message: 'È°πÁõÆÂ∑≤Âà†Èô§' });
              if (this.selectedProjectId === projectId) {
                this.selectedProjectId = null;
                this.selectedProjectDetail = null;
              }
              await this.loadProjects();
            } catch (error) {
              promptAction.showToast({ message: 'Âà†Èô§Â§±Ë¥•ÔºåËØ∑ÈáçËØï' });
              console.error('[Home] Delete project error:', error);
            }
          }
        }
      }
    });
  }

  build() {
    Stack() {
      Row() {
        // --- Â∑¶‰æßËæπÊ†è ---
        this.Sidebar()

        // --- Âè≥‰æßÂÜÖÂÆπÂå∫ ---
        Column() {
          if (this.isLoading) {
            LoadingView({ message: 'Âä†ËΩΩÈ°πÁõÆ‰∏≠...' })
          } else if (this.selectedProjectDetail) {
            // ‰ΩøÁî® key Â±ûÊÄßÂº∫Âà∂ÈáçÊñ∞ÂàõÂª∫ÁªÑ‰ª∂
            DashboardView({ project: this.selectedProjectDetail })
              .key(`${this.selectedProjectDetail.id}_${this.componentKey}`)
          } else {
            WelcomeView()
          }
        }
        .layoutWeight(2)
        .backgroundColor('#F8FAFC')
      }
      .width('100%')
      .height('100%')
    }
    .width('100%')
    .height('100%')
  }

  @Builder
  Sidebar() {
    Column({ space: 20 }) {
      // Ê†áÈ¢òÂå∫Âüü
      Row({ space: 12 }) {
        Text('üìÅ')
          .fontSize(24)
          .fontColor('#007DFF')
        Text('ÊàëÁöÑÈ°πÁõÆ')
          .fontSize(24)
          .fontWeight(FontWeight.Bold)
          .fontColor('#1F2937')
          .layoutWeight(1)
        Button({ type: ButtonType.Circle }) {
          Image($r('app.media.ic_add'))
            .width(20)
            .height(20)
            .fillColor(Color.White)
        }
        .width(48)
        .height(48)
        .backgroundColor('#007DFF')
        .shadow({ radius: 6, color: '#007DFF30', offsetX: 0, offsetY: 3 })
        .onClick(() => {
          // FIX: Call the new, robust creation method.
          this.createAndOpenNewProject();
        })
      }
      .width('100%')
      .alignItems(VerticalAlign.Center)

      // È°πÁõÆÂàóË°®
      if (this.projectList.length === 0) {
        Column({ space: 16 }) {
          Image($r('app.media.ic_empty_box'))
            .width(80)
            .height(80)
            .opacity(0.6)
          Text('ÊöÇÊó†È°πÁõÆ')
            .fontSize(18)
            .fontColor('#6B7280')
            .fontWeight(FontWeight.Medium)
          Text('ÁÇπÂáªÂè≥‰∏äËßíÁöÑ"+"ÊåâÈíÆÂàõÂª∫ÊÇ®ÁöÑÁ¨¨‰∏Ä‰∏™È°πÁõÆ')
            .fontSize(14)
            .fontColor('#9CA3AF')
            .textAlign(TextAlign.Center)
        }
        .width('100%')
        .layoutWeight(1)
        .justifyContent(FlexAlign.Center)
      } else {
        List({ space: 12 }) {
          ForEach(this.projectList, (meta: ProjectMeta) => {
            ListItem() {
              this.ProjectCard(meta)
            }
            .onClick(() => {
              console.log(`[Home] Project card clicked: ${meta.id}`);
              this.onSelectProject(meta.id);
            })
          })
        }
        .layoutWeight(1)
      }
    }
    .padding(24)
    .backgroundColor('#FFFFFF')
    .border({ width: { right: 1 }, color: '#E5E7EB' })
    .layoutWeight(1)
  }

  @Builder
  ProjectCard(meta: ProjectMeta) {
    Row({ space: 16 }) {
      // È°πÁõÆÂõæÊ†á
      Column() {
        Image($r('app.media.ic_project_file'))
          .width(24)
          .height(24)
          .fillColor('#007DFF')
      }
      .width(48)
      .height(48)
      .backgroundColor('#EFF6FF')
      .justifyContent(FlexAlign.Center)
      .borderRadius(10)
      .border({ width: 1, color: '#DBEAFE', radius: 10 })

      // È°πÁõÆ‰ø°ÊÅØ
      Column({ space: 6 }) {
        Text(meta.name)
          .fontSize(16)
          .fontWeight(FontWeight.Medium)
          .fontColor('#1F2937')
          .maxLines(1)
          .textOverflow({ overflow: TextOverflow.Ellipsis })
        Text(`‰øÆÊîπ‰∫é: ${new Date(meta.lastModified).toLocaleDateString()}`)
          .fontSize(12)
          .fontColor('#6B7280')
      }
      .alignItems(HorizontalAlign.Start)
      .layoutWeight(1)

      // Âà†Èô§ÊåâÈíÆ
      Button() {
        Image($r('app.media.ic_delete'))
          .width(16)
          .height(16)
          .fillColor('#EF4444')
      }
      .width(36)
      .height(36)
      .type(ButtonType.Circle)
      .backgroundColor('#FEF2F2')
      .border({ width: 1, color: '#FECACA', radius: 18 })
      .onClick(() => this.deleteProject(meta.id))
      .hitTestBehavior(HitTestMode.Block)
    }
    .width('100%')
    .padding(16)
    .backgroundColor(this.selectedProjectId === meta.id ? '#EFF6FF' : '#FFFFFF')
    .borderRadius(12)
    .shadow({ 
      radius: 4, 
      color: this.selectedProjectId === meta.id ? '#007DFF20' : '#00000008', 
      offsetX: 0, 
      offsetY: 1 
    })
    .border({ 
      width: this.selectedProjectId === meta.id ? 2 : 0, 
      color: '#007DFF', 
      radius: 12 
    })
    .useEffect(true)
  }

  @Builder
  EmptyState() {
    Column({ space: 16 }) {
      Image($r('app.media.ic_empty_box')).width(100).height(100).opacity(0.5)
      Text('ËøòÊ≤°Êúâ‰ªª‰ΩïÈ°πÁõÆ')
        .fontSize(18)
        .fontColor(Color.Gray)
      Text('ÁÇπÂáª‰∏äÊñπÁöÑ‚Äú+‚ÄùÊåâÈíÆÊù•ÂàõÂª∫‰∏Ä‰∏™Êñ∞È°πÁõÆÂêßÔºÅ')
        .fontSize(14)
        .fontColor(Color.Gray)
    }
    .width('100%')
    .justifyContent(FlexAlign.Center)
    .layoutWeight(1)
  }
}
